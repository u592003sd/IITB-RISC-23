library ieee;
use ieee.std_logic_1164.all;

entity Stage6 is
    port(
        clk : in std_logic;
        reset : in std_logic;
        result_WB, imm9_16_WB, DM_D_OUT_WB : IN std_logic_vector(15 downto 0);
		ra_WB, rb_WB, rc_WB : in std_logic_vector(2 downto 0);
		OPCODE_WB: in std_logic_vector(3 downto 0);
		flags_WB: in std_logic_vector(1 downto 0);
        Condition_WB: in std_logic_vector(1 downto 0);

        RF_AD_WB_RR: out std_logic_vector(2 downto 0);
        RF_DA_WB_RR: out std_logic_vector(15 downto 0)
        );
end entity;

architecture rtl of Stage6 is
    component MUX_4x16 is 
    port(
        --select signal
        sel : in std_logic_vector(1 downto 0);
        -- input data
        P0 : in std_logic_vector(15 downto 0);
        P1: in std_logic_vector(15 downto 0);
        P2: in std_logic_vector(15 downto 0);
        P3: in std_logic_vector(15 downto 0);
        --output data
        outp : out std_logic_vector(15 downto 0)
    );
    end component;

    component MUX_4x3 is 
    port(
        --select signal
        sel : in std_logic_vector(1 downto 0);
        -- input data
        P0 : in std_logic_vector(2 downto 0);
        P1: in std_logic_vector(2 downto 0);
        P2: in std_logic_vector(2 downto 0);
        P3: in std_logic_vector(2 downto 0);
        --output data
        outp : out std_logic_vector(2 downto 0)
    );
    end component;
    
    signal WB_DA_MUX_CTRL : std_logic_vector(1 downto 0);
    signal WB_AD_MUX_CTRL : std_logic_vector(1 downto 0);
    
    begin
        WB_DA_MUX : MUX_4x16 port map(
            sel => WB_DA_MUX_CTRL,
            P0 => result_WB,
            P1 => imm9_16_WB,
            P2 => DM_D_OUT_WB,
            P3 => "0000000000000000",
            outp => RF_DA_WB_RR
        );
        process(clk, reset,OPCODE_WB,Condition_WB )
        begin

            if ((OPCODE_WB="0001" OR OPODE_WB="0010") AND ((Condition_WB(1) XNOR Condition_WB(0)) OR ((not Condition_WB(1)) AND ((not Condition_WB(0)) OR flags_WB(0)) ))) then
                RF_AD_WB_RR <= rc_WB;
            elsif OPCODE_WB="0100" then
                RF_AD_WB_RR <= rb_WB;
            elsif OPCODE_WB="0011" OR OPCODE_WB = "0100" then
                RF_AD_WB_RR <= ra_WB;
            else
                RF_AD_WB_RR <= "000";
            end if;

        WB_DA_MUX_CTRL<=  
end architecture;