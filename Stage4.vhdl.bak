library ieee;
use ieee.std_logic_1164.all;

entity Stage4 is
    port(
        --INPUTS
        clk : in std_logic;
        reset : in std_logic;
        operand1_EX, operand2_EX : in std_logic_vector(15 downto 0); 
		imm6_EX : in std_logic_vector(5 downto 0); 
		imm9_16_EX : in std_logic_vector(15 downto 0);
		comp_EX : in std_logic;
		ra_EX, rb_EX, rc_EX : in std_logic_vector(2 downto 0);
		OPCODE_EX: in std_logic_vector(3 downto 0);
		flags_EX: in std_logic_vector(1 downto 0);

        --OUTPUTS

    );
end entity;

architecture rtl of Stage4 is
    component ALU is
        port (
            ALU_A: in std_logic_vector(15 downto 0);
            ALU_B: in std_logic_vector(15 downto 0);
            alu_control: in std_logic_vector(1 downto 0);
            C_in: in std_logic;
            ALU_C: out std_logic_vector(15 downto 0);
            C_out: out std_logic;
            Z_out: out std_logic
        ) ;
    end component;
    
    component SE6 is
        port(
            IMM6_IN: in std_logic_vector(5 downto 0);
            IMM6_OUT: out std_logic_vector(15 downto 0)
        );
    end component;
    
    component MUX_4x16 is 
    port(
        --select signal
        sel : in std_logic_vector(1 downto 0);
        -- input data
        P0 : in std_logic_vector(15 downto 0);
        P1: in std_logic_vector(15 downto 0);
        P2: in std_logic_vector(15 downto 0);
        P3: in std_logic_vector(15 downto 0);
        --output data
        outp : out std_logic_vector(15 downto 0)
    );

    end component;

    component MUX_2x1 is 
        port(
            --select signal
            sel : in std_logic_vector(1 downto 0);
            -- input data
            P0 : in std_logic;
            P1: in std_logic;
            --output data
            outp : out std_logic
        );
    end component;

    component flop is
        port (
            clk, reset, en, data_in : in std_logic;
            data_out : out std_logic
        );
    end component;

    signal RESULT : std_logic_vector(15 downto 0);
    --CTRL INPUTS
    signal ALU_CTRL : std_logic_vector(1 downto 0);
    signal ALU_MUX_A_CTRL, ALU_MUX_B_CTRL: in std_logic_vector(1 downto 0);
    signal CARRY_CTRL, ZERO_CTRL: in std_logic;
    begin
        ALU1 : ALU port map(
            ALU_A <= ALU_MUX_A_OUT,
            ALU_B <= ALU_MUX_B_OUT,
            alu_control <= ALU_CTRL,
            C_in <= CARRY_MUX_OUT,
            ALU_C <= RESULT,
            C_out <= CARRY_FLOP_IN,
            Z_out <= ZERO_FLOP_IN
        ) ;

        ALU_MUX_A_OUT : MUX_4x16 port map(
            sel <= ALU_MUX_A_CTRL,
            P0 <= operand1_EX,
            P1 <= IMM6_16
            P2 -- SOMEHOW GET A R0 HERE,
            P3 <= "0000000000000000",
            outp <= ALU_MAX_A_OUT
        );

        ALU_MUX_B_OUT : MUX_4x16 port map(
            sel <= ALU_MUX_B_CTRL,
            P0 <= operand2_EX,
            P1 <= IMM6_16,
            P2 <= ("000000000"&imm6_EX&'0'),
            P3 <= (imm9_16_EX(14 downto 0)&'0'),
            outp <= ALU_MAX_B_OUT
        );

        SIGN_EXTENDED: SE6 port map(
            IMM6_IN <= imm6_EX,
            IMM6_OUT <= IMM6_16
        );

        CARRY_MUX: MUX_2x1 port map(
            sel <= CARRY_MUX_CTRL,
            P0 : '0',
            P1 <= CARRY_FLOP_OUT,
            outp <= CARRY_MUX_OUT
        );

        CARRY_FLOP: flop port map(
                clk <= clk, reset <= reset, en <= CARRY_CTRL, data_in <= CARRY_IN,
                data_out<= CARRY_OUT
            );

        ZERO_FLOP: flop port map(
            clk <= clk, reset <= reset, en <= ZERO_CTRL, data_in <= ZERO_IN,
            data_out<= ZERO_OUT
        );

        ALU_CTRL <= (OPCODE(1)& not(OPCODE(1)));
        
end architecture;