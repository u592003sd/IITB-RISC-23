library ieee;
use ieee.std_logic_1164.all;

entity HazardUnit is
    port(
        -- Inputs
        clk: in std_logic;
        IR_S1: in std_logic_vector(15 downto 0);
        OPCODE_S2,OPCODe_S3,OPCODE_S4,OPCODE_S5,OPCODE_S6: in std_logic_vector(3 downto 0);

        -- Outputs
        RF_WR: out std_logic;
        IF_ID_RESET: out std_logic;
        ID_RR_RESET: out std_logic;
        RR_EX_RESET: out std_logic;
        EX_MA_RESET: out std_logic;
        MA_WB_RESET: out std_logic;
        BUBBLE_CTRL: out std_logic;

    );
end entity;

architecture RTL of HazardUnit is

    begin
        BUBBLE_BRANCH:process(clk,IR_S1,OPCODE_S2,OPCODe_S3,OPCODE_S4,OPCODE_S5,OPCODE_S6)
        variable stage_count: integer range -1 to 4 :=-1;
        begin
            if (IR_S1(15)="1") then
                BUBBLE_CTRL<='1';
                stage_count:= 4;
            elsif(stage_count=-1) then
                BUBBLE_CTRL<='0';      
            end if;
        end process
        Stage_Control:process(clk)
            if (clk'event and clk='0') then
                if (stage_count>=0) then
                    if(stage_count =  4) then
                        IF_ID_RESET<='1';
                    elsif (stage_count =3) then
                        ID_RR_RESET<='1';
                        IF_ID_RESET<='0';
                    elsif (stage_count =2) then
                        RR_EX_RESET<='1';
                        ID_RR_RESET<='0';
                    elsif (stage_count =1) then
                        EX_MA_RESET<='1';
                        RR_EX_RESET<='0';
                    elsif (stage_count =0) then
                        EX_MA_RESET<='0';
                        BUBBLE_CTRL<='0';
                    end if;
                    stage_count:=stage_count-1;
                end if;
            end if;
        end process;
end architecture;
```