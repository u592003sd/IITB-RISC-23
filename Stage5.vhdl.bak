library ieee;
use ieee.std_logic_1164.all;

entity Stage5 is
    port(
        clk : in std_logic;
        reset : in std_logic;
        OPCODE_MA: in std_logic_vector(3 downto 0);
        
        
        OPCODE_WB: out std_logic_vector(3 downto 0);
        );
end entity;

architecture rtl of Stage5 is
    component data_memory is
        port(
            clk : in std_logic;
            DM_EN : in std_logic;
            reset : in std_logic;
            DM_AD_IN1 : in std_logic_vector(15 downto 0);
            DM_DA_IN1 : in std_logic_vector(15 downto 0);
            DM_AD_OUT1 : in std_logic_vector(15 downto 0);
            --DM_AD_OUT2 : in std_logic_vector(15 downto 0);
    
            DM_DA_OUT1 : out std_logic_vector(15 downto 0);
            --DM_DA_OUT2 : out std_logic_vector(15 downto 0)
            );
    end component;

    component MUX_2x16 is 
    port(
        sel1 : in std_logic;
        -- input data
        P0 : in std_logic_vector(15 downto 0);
        P1: in std_logic_vector(15 downto 0);
        --output data
        outp : out std_logic_vector(15 downto 0)
    );
    end component ;

    begin
        DM1: data_memory port map();
        
        DM_READ_MUX: MUX_2x16 map port(
            sel1 <= DM_READ_MUX_CTRL,
            P0 <= RESULT_MA,
            P1 <=
            outp <= 
        ); 
end architecture;