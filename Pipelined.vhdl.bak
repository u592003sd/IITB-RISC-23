library ieee;
use ieee.std_logic_1164.all;

entity pipelined is
    port (
        clk : in std_logic;
        reset : in std_logic
    );
end entity;

architecture rtl of pipelined is
    component IR is
        port(
            clk : in std_logic;
            reset : in std_logic;
            IRin : in std_logic_vector(31 downto 0);
            IRout : out std_logic_vector(31 downto 0)
        );   
    end component;
    component Stage1 is
        port(
            clk : in std_logic;
            reset : in std_logic;
            IM_EN: in std_logc;
            RF_D0: in std_logic_vector(15 downto 0);
            IR_ID : out std_logic_vector(15 downto 0);
            PC_Next: out std_logic_vector(15 downto 0)
            );
    end component;
    component Stage2 is
        port(
            clk : in std_logic;
            reset : in std_logic;
            IR_ID_OUT: in std_logic_vector(15 downto 0);
            IR_RR_IN: out std_logic_vector(15 downto 0);
            OPCODE: out std_logic_vector(3 downto 0);
            RA: out std_logic_vector(2 downto 0);
            RB: out std_logic_vector(2 downto 0);
            RC: out std_logic_vector(2 downto 0);
            CONDITION: out std_logic_vector(1 downto 0);
            IMM6: out std_logic_vector(15 downto 0);
            IMM9: out std_logic_vector(15 downto 0)
            );
    end component;
    signal IR_ID_IN: std_logic_vector(31 downto 0);
    signal IR_ID_OUT: std_logic_vector(15 downto 0);
    signal IR_RR_IN: std_logic_vector(15 downto 0);
    signal OPCODE: std_logic_vector(3 downto 0);
    signal RA: std_logic_vector(2 downto 0);
    signal RB: std_logic_vector(2 downto 0);
    signal RC: std_logic_vector(2 downto 0);
    signal CONDITION: std_logic_vector(1 downto 0);
    signal IMM6: std_logic_vector(15 downto 0);
    signal IMM9: std_logic_vector(15 downto 0);
    signal IM_EN: std_logic;
    signal RF_D0: std_logic_vector(15 downto 0);
    signal PC_Next: std_logic_vector(15 downto 0);
begin

    Stage11: Stage1 port map(
        clk => clk,
        reset => reset,
        IM_EN => IM_EN,
        RF_D0 => RF_D0,
        IR_ID => IR_ID,
        PC_Next => PC_Next
    )

    IR_ID : IR port map(
        clk => clk,
        reset => reset,
        IRin => IR_ID_IN,
        IRout => IR_ID_OUT
    )
    
    Stage21: Stage2 port map(
        clk => clk,
        reset => reset,
        IR_ID_OUT => IR_ID_OUT,
        IR_RR_IN => IR_RR_IN,
        OPCODE => OPCODE,
        RA => RA,
        RB => RB,
        RC => RC,
        CONDITION => CONDITION,
        IMM6 => IMM6,
        IMM9 => IMM9
    )

    
end architecture;
```